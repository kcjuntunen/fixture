#!/usr/bin/env python
import httplib, urllib, os, datetime, serial, smtplib, json
import sqlite_writer as sqlw
import utility as u

class monitor():
    def __init__(self, config_file = '/etc/thingspeak.json'):
        with open('/etc/thingspeak.json') as data_file:
            self.config_data = json.load(data_file)
            self.local_db = self.config_data["localDB"]
            self.key = self.config_data["key"]
            self.api_key = self.config_data["api_key"]
            self.unit = self.config_data["unit"]
            self.smtp_server = self.config_data["smtp_server"]
            self.sender = self.config_data["sender"]
            self.recipients = self.config_data["recipients"]
            self.threshold = self.config_data["light_threshold"]
            self.ser = serial.Serial(self.config_data["serial_port"],
                                     self.config_data["baud"])
            self.sw = sqlw.sqlite_writer(self.local_db)

            self.sent_on = False
            self.sent_off = False

    def tweet(self, message):
        params = urllib.urlencode(
            {'api_key': self.api_key,
             'status': message})

        headers = {"Content-type": "application/x-www-form-urlencoded",
                   "Accept": "text/plain"}

        conn = httplib.HTTPConnection("api.thingspeak.com:80")

        try:
            conn.request("POST",
                         "/apps/thingtweet/1/statuses/update",
                         params,
                         headers)

            response = conn.getresponse()
            data = response.read()
            conn.close()
            return True
        except:
            sw.insert_alert("Tweet connection failed", 0, 0, 0)
            return False


    def send_email(self, subj, msg):
        try:
            sender = self.sender
            receivers = self.recipients
            message = "From: " + self.unit  + " <no_real_email@nobody.com>"
            message += "\nTo: "

            rec_cnt = len(receivers)
            cnt = 1
            for s in receivers:
                message += "<" + s
                message += ">"
                if cnt < rec_cnt:
                    message += ", "

            message += "Subject: "

            message += subj + "\n\n"
            message += msg + "\n"
            smtpo = smtplib.SMTP(self.smtp_server)
            smtpo.sendmail(sender, receivers, message)
        except Exception, e:
            self.sw.insert_alert("Failure sending email: {0}"
                                 .format(e), 0, 0, 0)

    def send_data(self):
        try:
            l = self.ser.readline()
            line = str.split(l, ":")
        except:
            msg = "Couldn't split string: "
            if l:
                msg += l
            self.sw.insert_alert(msg, 0, 0, 0);

        try:
            self.sw.insert_ser_line(l)
        except:
            print "Couldn't insert data."

        paramsd = {'field1': line[1],
                   'field2': line[2],
                   'field3': line[3],
                   'field4': line[4],
                   'field5': line[5],
                   'field6': line[6],
                   'field7': os.getloadavg()[0],
                   'field8': line[7],
                   'key': self.key}

        if float(line[4]) < self.threshold:
            if not self.sent_off:
                today = datetime.datetime.now()
                paramsd['status'] = "Lights are out."
                msg = "The lights are out in {0}. ({1} UTC)".format(
                    self.unit, today.strftime('%b %d %Y %H:%M'))
                tw = self.tweet(msg)

                t = 0
                if tw:
                    t = 1
                self.sw.insert_alert("Lights are out.", 0, t, 1)
                self.sent_off = True
                self.sent_on = False

        if float(line[4]) > self.threshold:
            if not self.sent_on:
                today = datetime.datetime.now()
                paramsd['status'] = "Lights are back on."
                tw = self.tweet("The lights are back on in {0}. ({1} UTC)".format(
                    self.unit, today.strftime('%b %d %Y %H:%M')))
                t = 0
                if tw:
                    t = 1

                self.sw.insert_alert("Lights are back on.", 0, t, 1)
                self.sent_on = True
                self.sent_off = False

        params = urllib.urlencode(paramsd)

        headers = {"Content-type": "application/x-www-form-urlencoded",
                   "Accept": "text/plain"}

        conn = httplib.HTTPConnection("api.thingspeak.com:80")

        try:
            conn.request("POST", "/update", params, headers)
            response = conn.getresponse()
            #print response.status, response.reason
            data = response.read()
            conn.close()
        except:
            self.sw.insert_alert("Connection failed", 0, 0, 0)


    def loop(self):
        while True:
            try:
                self.send_data()
            except Exception as e:
                self.sw.insert_alert("Exception: {0}".format(e), 0, 0, 0)

if __name__ == "__main__":
    import ip
    ip.broadcast_ip()
    moni = monitor()
    moni.loop()
