#!/usr/bin/env python
import httplib, urllib, os
import datetime
import serial, smtplib
import sqlite_writer as sqlw
import utility as u

sent = False

def tweet(message):
    global config_data
    global sent
    params = urllib.urlencode(
        {'api_key': config_data["api_key"],
         'status': message})

    headers = {"Content-type": "application/x-www-form-urlencoded",
               "Accept": "text/plain"}

    conn = httplib.HTTPConnection("api.thingspeak.com:80")

    try:
        conn.request("POST",
                     "/apps/thingtweet/1/statuses/update",
                     params,
                     headers)

        response = conn.getresponse()
        print response.status, response.reason
        data = response.read()
        conn.close()
    except:
        print "Tweet connection failed"


def send_email(subj, msg):
    print "Attempting to send email"
    try:
        sender = config_data["sender"]
        receivers = config_data["recipients"]
        message = "From: Raspberry Pi <no_real_email@nobody.com>"
        message += "\nTo: "

        rec_cnt = len(receivers)
        cnt = 1
        for s in receivers:
            message += "<" + s
            message += ">"
            if cnt < rec_cnt:
              message += ", "

        message += "Subject: "

        message += subj + "\n\n"
        message += msg + "\n"
        smtpo = smtplib.SMTP(config_data["smtp_server"])
        smtpo.sendmail(sender, receivers, message)
        print "Sent email"
    except Exception, e:
        print "Failure sending email. %s" % e


def send_data(ser, dbf):
    global sent
    sw = sqlw.sqlite_writer(dbf)
    try:
        l = ser.readline()
        line = str.split(l, ":")
        print l
    except:
        print "Couldn't split string: "
        if l:
            print l

    try:
        sw.insert_ser_line(l)
    except:
        print "Couldn't insert data."

    paramsd = {'field1': line[1],
         'field2': line[2],
         'field3': line[3],
         'field4': line[4],
         'field5': line[5],
         'field6': line[6],
         'field7': os.getloadavg()[0],
         'field8': line[7],
         'key': config_data["key"]}

    if float(line[4]) < config_data["light_threshold"] and not sent:
        today = datetime.datetime.now()
        paramsd['status'] = "Lights are out."
        tweet("The lights are out in {0}. ({1} UTC)".format(
            config_data["unit"], today.strftime('%b %d %Y %H:%M')))
        sent = True


    if (float(line[4]) > config_data["light_threshold"]) and sent:
        today = datetime.datetime.now()
        paramsd['status'] = "Lights are back on."
        tweet("The lights are back on in {0}. ({1} UTC)".format(
            config_data["unit"], today.strftime('%b %d %Y %H:%M')))
        sent = False

    params = urllib.urlencode(paramsd)


    headers = {"Content-type": "application/x-www-form-urlencoded",
               "Accept": "text/plain"}

    conn = httplib.HTTPConnection("api.thingspeak.com:80")

    try:
        conn.request("POST", "/update", params, headers)
        response = conn.getresponse()
        print response.status, response.reason
        data = response.read()
        conn.close()
    except:
        print "Connection failed"

if __name__ == "__main__":
    global config_data
    import ip
    import json
    import time

    #while 'wlan0' not in ip.all_interfaces():
    #    time.sleep(15)

    ip.broadcast_ip()

    with open('/etc/thingspeak.json') as data_file:
         config_data = json.load(data_file)

    ser = serial.Serial('/dev/ttyAMA0', 9600)
    database_file = config_data["localDB"]
    while True:
        try:
            send_data(ser, database_file)
        except Exception as e:
            print "Exception: %s" % e
            send_data(ser, database_file)
